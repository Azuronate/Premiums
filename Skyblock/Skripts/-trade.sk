options:
	Prefix: &7[&aTrade&7] &a
	
on load:
	set {playerSlots::*} to 10,11,12,19,20,21,28,29 and 30

	
command trade [<player>] [<text>]:
	trigger:
		if arg-2 is "accept":
			if {tradeRequest::%player%} is set:
				trade(player,{tradeRequest::%player%})
				delete {tradeRequest::%player%}
			else:
				send "{@Prefix}You don't have a trade request to accept"
		if arg-2 is "decline" or "deny":
			if {tradeRequest::%player%} is set:
				send "{@Prefix}%Player% &ahas declined your trade request" to {tradeRequest::%player%}
				delete {tradeRequest::%player%}
			else:
				send "{@Prefix}You don't have a trade request to decline"
				
		if arg-1 is a player:
			if arg-1 is not player:
				if {tradeRequest::%arg-1%} is not set:
					set {tradeRequest::%arg-1%} to player
					send "{@Prefix}You've sent a trade request to %arg-1%"
					send "{@Prefix}%Player% &ahas sent you a trade request, you have 30 seconds to accept it" and "{@Prefix}<command:/trade accept>&8[&aAccept&8]<reset> <command:/trade deny>&8[&cDecline&8]<reset>" to arg-1
					wait 30 seconds
					delete {tradeRequest::%arg-1%}
				else:
					send "{@Prefix}%arg-2% &ahas already a trade request"
			else:
				send "{@Prefix}You can't trade with yourself"
		else:
			send "{@Prefix}/trade <player>"
			send "{@Prefix}/trade accept"
			send "{@Prefix}/trade decline | deny"


#This function works as main Trade Task
# it runs aslong the trade is going on....
# and it tests if the players have accepted the trade and completes it then		
function trade(p1:player,p2:player):
	set {tradePartner::%{_p1}%} to {_p2}
	set {tradePartner::%{_p2}%} to {_p1}
	tradeInventory({_p1})
	tradeInventory({_p2})
	While {tradePartner::%{_p1}%} is set:
		wait 1 second
		if {accept::%{_p1}%} is true:
			if {accept::%{_p2}%} is true:
				Timer({_p1},{_p2})
				wait 6 seconds
				
				
# The Timer... 				
function Timer(p1:player,p2:player):
	set {_timer} to true
	set {_slots::*} to 4,13,22,31 and 40
	format gui slot {_slots::*} of {_p1} with red stained glass pane
	format gui slot {_slots::*} of {_p2} with red stained glass pane
	Wait 1 second
	set {_i} to 1
	
	while {_timer} is true:
		if {accept::%{_p1}%} is false:
			set {_timer} to false
		if {accept::%{_p2}%} is false:
			set {_timer} to false
		format gui slot {_slots::%{_i}%} of {_p1} with green stained glass pane
		format gui slot {_slots::%{_i}%} of {_p2} with green stained glass pane
		play sound "Entity.arrow.hit_player" with volume 0.5 with pitch 1 to {_p1}
		play sound "Entity.arrow.hit_player" with volume 0.5 with pitch 1 to {_p2}
		set {_i} to {_i}+1
		wait 1 second
		if {_i} = 6:
			play sound "Entity.arrow.hit_player" with volume 0.5 with pitch 2 to {_p1}
			play sound "Entity.arrow.hit_player" with volume 0.5 with pitch 2 to {_p2}
			set {_timer} to false
			
	#tests if someone cancelled it in the last second		
	if {accept::%{_p1}%} is false:
		set {_test} to false
	if {accept::%{_p2}%} is false:
		set {_test} to false
	if {_test} is false:
		format gui slot {_slots::*} of {_p1} with black stained glass pane
		format gui slot {_slots::*} of {_p2} with black stained glass pane
	else:
		tradeComplete({_p1},{_p2})
		
		
# Gives the item to the players and closes their inventory		
function tradeComplete(p1:player,p2:player):
	give {_p1} {tradeinv::%{_p2}%::*}
	give {_p2} {tradeinv::%{_p1}%::*}
	Format gui slot {playerSlots::*} of {_p1} with air
	Format gui slot {playerSlots::*} of {_p2} with air
	close {_p1}'s inventory if name of slot 2 of {_p1}'s current inventory is "%{_p1}%"
	close {_p2}'s inventory if name of slot 2 of {_p2}'s current inventory is "%{_p2}%"
	
#Trade accept, tests if they accepted the trade and if they did, it locks their items 

function acceptTrade(p:player):
	set {_p2} to {tradePartner::%{_p}%}
	if {accept::%{_p}%} is true:
		format gui slot 38 of {_p} with lime dye named "&cClick to Cancel" to run:
			
			#Items get unfreezed
			loop {playerSlots::*}:
				set {_i} to slot loop-value of {_p}'s current inventory
				unformat gui slot loop-value of {_p}
				set slot loop-value of {_p}'s current inventory to {_i}
				
			set {accept::%{_p}%} to false	
			acceptTrade({_p})
	else:
		format gui slot 38 of {_p} with gray dye named "&aClick to Accept" to run:
			#Itemfreeze
			loop {playerSlots::*}:
				format gui slot loop-value of {_p} with slot loop-value of {_p}'s current inventory to do nothing
				
			set {accept::%{_p}%} to true
			acceptTrade({_p})
			
#The inventory for each player			
function tradeInventory(p:player):
	#inventory layout
	open virtual chest inventory with size 5 named "Trade" to {_p}
	format gui slot (all integers between 0 and 44) of {_p} with black stained glass pane to do nothing
	format gui slot 2 of {_p} with skull of {_p} named "%{_p}%" to do nothing
	format gui slot 6 of {_p} with skull of {tradePartner::%{_p}%} named "%{tradePartner::%{_p}%}%" to do nothing
	acceptTrade({_p})
	unformat gui slot {playerSlots::*} of {_p}
	
	# Sync, the items and the accept status gets synchronised
	
	while name of slot 2 of {_p}'s current inventory  is "%{_p}%":
		#Shows if the opposite player did accept the trade:
		if {accept::%{tradePartner::%{_p}%}%} is true:
			format gui slot 42 of {_p} with lime dye named "&aAccepted"
		else:
			format gui slot 42 of {_p} with gray dye named "&7Not Accepted"
			
		#Syncs the items
		loop {playerSlots::*}:
			set {tradeinv::%{_p}%::%loop-value+4%} to slot loop-value of {_p}'s current inventory 
		loop {tradeinv::%{tradePartner::%{_p}%}%::*}:
			set slot loop-index parsed as number of {_p}'s current inventory to loop-value
			
		wait 1 second		
		
#If the inventory gets closed, it deletes all their trade stuff and gives the items back
on quit:
	set {_i} to slot 2 of player's current inventory 
	if name of {_i} is "%player%":
		give player slot 10,11,12,19,20,21,28,29 and 30 of player's current inventory
		wait 1 tick
		close {tradePartner::%player%}'s inventory if name of slot 2 of {tradePartner::%player%}'s current inventory is "%{tradePartner::%player%}%" 
		delete {tradePartner::%player%}
		set {accept::%player%} to false
		delete {tradeinv::%player%::*}
on inventory close:
	set {_i} to slot 2 of player's current inventory 
	if name of {_i} is "%player%":
		give player slot 10,11,12,19,20,21,28,29 and 30 of player's current inventory
		wait 1 tick
		close {tradePartner::%player%}'s inventory if name of slot 2 of {tradePartner::%player%}'s current inventory is "%{tradePartner::%player%}%" 
		delete {tradePartner::%player%}
		set {accept::%player%} to false
		delete {tradeinv::%player%::*}