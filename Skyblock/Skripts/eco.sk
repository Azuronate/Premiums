options:
	tag: &e&lSKYBLOCK &7Â¬&f

command /eco [<text>] [<offlineplayer>] [<number>]:
	permission: premiums.eco.manage
	permission message: {@tag} &fYou don't have permissions do to this!
	trigger:
		if arg-1 is "give" or "add":
			if arg-2 is set:
				if arg-3 is a number:
					set {_uuid} to uuid of arg-2
					add arg-3 to {balance::%{_uuid}%}
					send "{@tag} &fAdded $%format(arg-3)% to %arg-2%'s balance."
					send "{@tag} &f$%format(arg-3)% has been added to your balance." to arg-2
		if arg-1 is "remove" or "take":
			if arg-2 is set:
				if arg-3 is a number:
					set {_uuid} to uuid of arg-2
					set {_amount} to arg-3
					set {_removed} to ({balance::%{_uuid}%} - {_amount})
					if {_removed} is less than 0:
						set {balance::%{_uuid}%} to 0
						send "{@tag} &fRemoved $%format(arg-3)% from %arg-2%'s balance."
						send "{@tag} &f$%format(arg-3)% has been removed from your balance." to arg-2
						stop
					else:
						remove arg-3 from {balance::%{_uuid}%}
						send "{@tag} &fRemoved $%format(arg-3)% from %arg-2%'s balance."
						send "{@tag} &f$%format(arg-3)% has been removed from your balance." to arg-2
		if arg-1 is "reset":
			if arg-2 is set:
				if arg-3 isn't set:
					set {_uuid} to uuid of arg-2
					set {balance::%{_uuid}%} to 0
					send "{@tag} &fReset %arg-2%'s balance."
					send "{@tag} &fYour balance has been reseted." to arg-2
		if arg-1 is "set":
			if arg-2 is set:
				if arg-3 is a number:
					set {_uuid} to uuid of arg-2
					set {balance::%{_uuid}%} to arg-3
					send "{@tag} &fSet %arg-2%'s balance to $%format(arg-3)%"
					send "{@tag} &fYour balance has been set to $%format(arg-3)%" to arg-2


command /gem [<text>] [<offlineplayer>] [<number>]:
	aliases: gems
	trigger:
		if arg-1 isn't set:
			if arg-2 isn't set:
				if arg-3 isn't set:
					set {_uuid} to uuid of player
					send "{@tag} &fYou have %format({gems::%{_uuid}%})% gems"
					stop
		if arg-1 is set:
			if arg-2 isn't set: 
				if arg-3 isn't set:
					set {_player} to arg-1 parsed as offline player
					set {_uuid} to uuid of {_player}
					send "{@tag} &f%{_player}% has %format({gems::%{_uuid}%})% gems"
					stop						
		if sender has permission "premiums.eco.manage":
			if arg-1 is "give" or "add":
				if arg-2 is set:
					if arg-3 is a number:
						set {_uuid} to uuid of arg-2
						add arg-3 to {gems::%{_uuid}%}
						send "{@tag} &fAdded %format(arg-3)% to %arg-2%'s gems."
						send "{@tag} &f%format(arg-3)% gems has been added to your gems." to arg-2
			if arg-1 is "remove" or "take":
				if arg-2 is set:
					if arg-3 is a number:
						set {_uuid} to uuid of arg-2
						set {_amount} to arg-3
						set {_removed} to ({gems::%{_uuid}%} - {_amount})
						if {_removed} is less than 0:
							set {gems::%{_uuid}%} to 0
							send "{@tag} &fRemoved %format(arg-3)% from %arg-2%'s gems."
							send "{@tag} &f%format(arg-3)% gems has been removed from your gems." to arg-2
							stop
						else:
							remove arg-3 from {gems::%{_uuid}%}
							send "{@tag} &fRemoved %format(arg-3)% from %arg-2%'s gems."
							send "{@tag} &f%format(arg-3)% gems has been removed from your gems." to arg-2
			if arg-1 is "reset":
				if arg-2 is set:
					if arg-3 isn't set:
						set {_uuid} to uuid of arg-2
						set {gems::%{_uuid}%} to 0
						send "{@tag} &fReset %arg-2%'s gems."
						send "{@tag} &fYour gems has been reseted." to arg-2
			if arg-1 is "set":
				if arg-2 is set:
					if arg-3 is a number:
						set {_uuid} to uuid of arg-2
						set {gems::%{_uuid}%} to arg-3
						send "{@tag} &fSet %arg-2%'s gems to %format(arg-3)%"
						send "{@tag} &fYour gems has been set to %format(arg-3)%" to arg-2
		else:
			send "{@tag} &fYou don't have permissions do to this!"
			stop



command /pay [<offlineplayer>] [<number>]:
	trigger:
		if arg-1 is set:
			if arg-1 is online:
				if arg-2 is a number:
					if arg-2 > 0:
						set {_uuid} to uuid of player
						if arg-2 is less than or equal to {balance::%{_uuid}%}:
							set {_arg} to "%arg-2%" 
							if {_arg} doesn't contain ".":
								set {_uuida} to uuid of arg-1
								remove arg-2 from {balance::%{_uuid}%}
								add arg-2 to {balance::%{_uuida}%}
								send "{@tag} &fSent %arg-1% $%format(arg-2)%"
								send "{@tag} &f%player% sent you $%format(arg-2)%" to arg-1
						else:
							send "{@tag} &fYou don't have enough money!"
							stop
					else:
						send "{@tag} &fYou cannot send negative money!"
						stop
				else:
					send "{@tag} &fPut in a valid number!"
					stop		
					
command /gempay [<offlineplayer>] [<number>]:
	trigger:
		if arg-1 is set:
			if arg-1 is online:
				if arg-2 is a number:
					if arg-2 > 0:
						set {_uuid} to uuid of player
						if arg-2 is less than or equal to {gems::%{_uuid}%}:
							set {_arg} to "%arg-2%" 
							if {_arg} doesn't contain ".":
								set {_uuida} to uuid of arg-1
								remove arg-2 from {gems::%{_uuid}%}
								add arg-2 to {gems::%{_uuida}%}
								send "{@tag} &fSent %arg-1% %format(arg-2)% Gems"
								send "{@tag} &f%player% sent you %format(arg-2)% Gems" to arg-1
						else:
							send "{@tag} &fYou don't have enough gems!"
							stop
					else:
						send "{@tag} &fYou cannot send negative gems!"
						stop
				else:
					send "{@tag} &fPut in a valid number!"
					stop	

on command "/balance":
	cancel event
	make player execute "/bal"

on command "/balancetop":
	cancel event
	make player execute "/baltop"

on command "/bal top":
	cancel event
	make player execute "/baltop"

on command "/moneytop":
	cancel event
	make player execute "/baltop" 

command bal [<offlineplayer>]:
	trigger:
		if arg-1 is set:
			set {_uuid} to uuid of arg-1
			send "{@tag} &f%arg-1%'s balance is $%format({balance::%{_uuid}%})%"
			stop
		else:
			set {_uuid} to uuid of player
			send "{@tag} &fYour balance is $%format({balance::%{_uuid}%})%"
			stop			

command /withdraw [<number>]:
	trigger:
		if arg-1 is a number:
			if arg-1 > 0:
				set {_check} to "%arg-1%"
				if {_check} doesn't contain ".":
					set {_uuid} to uuid of player
					if {balance::%{_uuid}%} is greater than or equal to arg-1:
						remove arg-1 from {balance::%{_uuid}%}
						give player 1 paper named "&6Banknote &7(Right Click)" with lore "&eValue &f$%regex(arg 1)%" and "&eSigner &f%player%"
						play sound "ENTITY_BAT_LOOP" with volume 0.5 and pitch 10 to the player	  
					else:
						send "{@tag} &fYou have nothing to withdraw!"
						stop
				else:
					send "{@tag} &fYou must input a whole number value!"
					stop
			else:
				send "{@tag} &fYou must input a postive number!"
				stop		 
				   
command /baltop:
	trigger:
		create a gui with virtual chest inventory with 6 rows named "Balance Top": 
			set {_q} to "MHF_Question" parsed as offline player
			format gui slot 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 26, 27, 35, 36, 44, 45, 46, 47, 48, 50, 51, 52, and 53 with black stained glass pane named "&0"
			format gui slot 10, 11, 12, 14, 15, 16, 19, 20, 22, 24, 25, 28, 30, 32, 34, 38, 40, and 42 with gray stained glass pane named "&7"
			format gui slot 13, 21, 23, 29, 31, 33, 37, 39, 41, and 43 with skull of {_q} named "&7???"
			format gui slot 49 with barrier named "&cMain Menu":
				ismenu(player)
			format gui slot 13 with skull of {baltop.player1} named "&6(##1) &f%{baltop.player1}%" with lore "", "&e&lSTATISTICS", " &fBalance: $%regex({baltop.value1})%", " &fRank: &f##1" and ""
			format gui slot 21 with skull of {baltop.player2} named "&e(##2) &f%{baltop.player2}%" with lore "", "&e&lSTATISTICS", " &fBalance: $%regex({baltop.value2})%", " &fRank: &f##2" and ""
			format gui slot 23 with skull of {baltop.player3} named "&e(##3) &f%{baltop.player3}%" with lore "", "&e&lSTATISTICS", " &fBalance: $%regex({baltop.value3})%", " &fRank: &f##3" and ""
			format gui slot 29 with skull of {baltop.player4} named "&e(##4) &f%{baltop.player4}%" with lore "", "&e&lSTATISTICS", " &fBalance: $%regex({baltop.value4})%", " &fRank: &f##4" and ""
			format gui slot 31 with skull of {baltop.player5} named "&e(##5) &f%{baltop.player5}%" with lore "", "&e&lSTATISTICS", " &fBalance: $%regex({baltop.value5})%", " &fRank: &f##5" and ""
			format gui slot 33 with skull of {baltop.player6} named "&e(##6) &f%{baltop.player6}%" with lore "", "&e&lSTATISTICS", " &fBalance: $%regex({baltop.value6})%", " &fRank: &f##6" and ""
			format gui slot 37 with skull of {baltop.player7} named "&e(##7) &f%{baltop.player7}%" with lore "", "&e&lSTATISTICS", " &fBalance: $%regex({baltop.value7})%", " &fRank: &f##7" and ""
			format gui slot 39 with skull of {baltop.player8} named "&e(##8) &f%{baltop.player8}%" with lore "", "&e&lSTATISTICS", " &fBalance: $%regex({baltop.value8})%", " &fRank: &f##8" and ""
			format gui slot 41 with skull of {baltop.player9} named "&e(##9) &f%{baltop.player9}%" with lore "", "&e&lSTATISTICS", " &fBalance: $%regex({baltop.value9})%", " &fRank: &f##9" and ""
			format gui slot 43 with skull of {baltop.player10} named "&e(##10) &f%{baltop.player10}%" with lore "", "&e&lSTATISTICS", " &fBalance: $%regex({baltop.value10})%", " &fRank: &f##10" and ""			
			#set {_topnumber} to 1
			#loop {balance::*}:
			#	set {_sorted::*} to sort((indices of {balance::*}), {balance::*})
			#	#send "%{_sorted::*}%"
			#	loop {_sorted::*}:
			#		set {_player} to "%loop-value-2%" parsed as offline player
			#		set {_check} to "%{_player}%"
			#		if {_check} contains "*":
			#			replace all "*" in {_check} with ""
			#			set {_player} to {_check}
			#		if {_check} contains "null" or "<none>":
			#			set {_null} to true
			#		set {_uuid} to uuid of {_player}
			#		set {_head} to "%{_player}%" parsed as offline player
			#		set {_value::%{_player}%} to {balance::%{_uuid}%}
			#		set {_o} to {island.owner::%{_player}%}
			#		if {_value::%{_player}%} is less than or equal to 0:
			#			exit loop
			#		else:				
			#			if {_topnumber} is 1:
			#				set {_slot} to 13
			#				set {_place::%{_player}%} to "&6(##1)"
			#			else if {_topnumber} is 2:
			#				set {_slot} to 21
			#				set {_place::%{_player}%} to "&e(##2)"
			#			else if {_topnumber} is 3:
			#				set {_slot} to 23
			#				set {_place::%{_player}%} to "&e(##3)"
			#			else if {_topnumber} is 4:
			#				set {_slot} to 29
			#				set {_place::%{_player}%} to "&e(##4)"
			#			else if {_topnumber} is 5:
			#				set {_slot} to 31
			#				set {_place::%{_player}%} to "&e(##5)"
			#			else if {_topnumber} is 6:
			#				set {_slot} to 33
			#				set {_place::%{_player}%} to "&e(##6)"
			#			else if {_topnumber} is 7:
			#				set {_slot} to 37
			#				set {_place::%{_player}%} to "&e(##7)"
			#			else if {_topnumber} is 8:
			#				set {_slot} to 39	
			#				set {_place::%{_player}%} to "&e(##8)"
			#			else if {_topnumber} is 9:
			#				set {_slot} to 41
			#				set {_place::%{_player}%} to "&e(##9)"
			#			else if {_topnumber} is 10:
			#				set {_slot} to 43
			#				set {_place::%{_player}%} to "&e(##10)"
			#			set {_skull} to skull of {_head} named "%{_place::%{_player}%}% &f%{_player}%"
			#			add "" to lore of {_skull}
			#			add colored "&e&lSTATISTICS" to lore of {_skull}
			#			if {_value::%{_player}%} isn't set:
			#				set {_value::%{_player}%} to "???"
			#				add colored " &fBalance: $???" to lore of {_skull}
			#			if {_o} isn't set:
			#				set {_o} to "???"
			#			if {_value::%{_player}%} isn't "???":
			#				add colored " &fBalance: $%format({_value::%{_player}%})%" to lore of {_skull}
			#			add colored " &fRank: ##%{_topnumber}%" to lore of {_skull}
			#			add "" to lore of {_skull}
			#			add colored "&e&lTEAM" to lore of {_skull}
			#			add colored " &f%{_o}%" to lore of {_skull}
			#			if {_topnumber} is 11:
			#				stop
			#		if {_null} isn't set:
			#			format gui slot {_slot} with {_skull}
			#			add 1 to {_topnumber}
		open gui last gui to player  	
		stop	  

on right click with paper:
	if name of player's tool contains "&6Banknote":
		set {_uuid} to uuid of player
		set {_amount} to uncolored line 1 of lore of player's tool
		replace all "," in {_amount} with ""
		replace all "Value $" with "" in {_amount}
		add {_amount} parsed as integer to {balance::%{_uuid}%}
		remove 1 of tool from player's tool
		play sound "ENTITY_ARROW_HIT_PLAYER" with volume 0.5 and pitch 15 to the player

#===Shop===#
